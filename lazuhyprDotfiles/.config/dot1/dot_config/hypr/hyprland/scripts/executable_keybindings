#!/bin/bash

# Configuration
readonly KEYBINDINGS_CONFIG="$HOME/.config/hypr/hyprland/keybinds.conf"
readonly WINDOWS_ICON="î˜ª"

check_dependencies() {
  if ! command -v yad &>/dev/null; then
    notify-send "YAD NOT FOUND!" "Please install yad first!"
    exit 1
  fi

  if [[ ! -f "$KEYBINDINGS_CONFIG" ]]; then
    notify-send "Missing config file" "Keybindings config file not found at $KEYBINDINGS_CONFIG"
    exit 1
  fi
}

ensure_single_instance() {

  if pkill -f "yad.*--title=keybindings"; then
    exit 0
  fi
}

# Format special keys with friendly names
format_special_key() {
  local key="$1"
  case "$key" in
  "51") echo "\\" ;;
  "XF86AudioRaiseVolume") echo "Volume Up" ;;
  "XF86AudioLowerVolume") echo "Volume Down" ;;
  "XF86AudioMute") echo "Mute" ;;
  "XF86AudioMicMute") echo "Mic Mute" ;;
  "XF86MonBrightnessUp") echo "Brightness Up" ;;
  "XF86MonBrightnessDown") echo "Brightness Down" ;;
  "XF86PowerOff") echo "Power Button" ;;
  "XF86AudioNext") echo "Next Track" ;;
  "XF86AudioPause") echo "Pause" ;;
  "XF86AudioPlay") echo "Play" ;;
  "XF86AudioPrev") echo "Previous Track" ;;
  "mouse:272") echo "LMB" ;;
  "mouse:273") echo "RMB" ;;
  "mouse_down") echo "Mouse Scroll Down" ;;
  "mouse_up") echo "Mouse Scroll Up" ;;
  *) echo "$key" ;;
  esac
}

# Format modifier keys
format_modifier() {
  local modifier="$1"

  # Replace variables
  modifier="${modifier//\$mainMod/$WINDOWS_ICON}"
  modifier="${modifier//\$shiftMod/Shift}"
  modifier="${modifier//WIN/$WINDOWS_ICON}"
  modifier="${modifier//SUPER/$WINDOWS_ICON}"

  # Handle space-separated modifiers with proper spacing
  modifier="${modifier// /   +  }"
  modifier="${modifier//ALT_R/Right ALT}"

  echo "$modifier"
}

# Create key combination string with fixed width for alignment
create_key_combo() {
  local modifier="$1"
  local key="$2"
  local submap="$3"

  local formatted_key
  formatted_key=$(format_special_key "$key")

  local key_combo
  if [[ -n "$modifier" && "$modifier" != "" ]]; then
    local formatted_modifier
    formatted_modifier=$(format_modifier "$modifier")
    key_combo="$formatted_modifier   +  $formatted_key"
  else
    key_combo="$formatted_key"
  fi

  # Add submap prefix if in submap
  if [[ -n "$submap" ]]; then
    key_combo="($submap) $key_combo"
  fi

  # Pad to fixed width for alignment (40 characters)
  printf "%-40s" "$key_combo"
}

# Parse keybindings from config file
parse_keybindings() {
  local bindings=()
  local current_submap=""

  while IFS= read -r line; do
    # Skip comments and empty lines
    [[ "$line" =~ ^[[:space:]]*#.*$ ]] && continue
    [[ -z "${line// /}" ]] && continue

    # Parse binding lines
    if [[ "$line" =~ ^(bind[a-z]*)[[:space:]]*=[[:space:]]*(.*) ]]; then
      local bind_type="${BASH_REMATCH[1]}"
      local binding="${BASH_REMATCH[2]}"

      # Handle bindd format
      if [[ "$bind_type" =~ ^bindd ]]; then
        if [[ "$binding" =~ ^([^,]*),([^,]*),([^,]*),([^,]*)(,(.*))?$ ]]; then
          local modifier="${BASH_REMATCH[1]}"
          local key="${BASH_REMATCH[2]// /}"
          local description="${BASH_REMATCH[3]}"

          local key_combo
          key_combo=$(create_key_combo "$modifier" "$key" "$current_submap")

          bindings+=("$key_combo" "$description")
        fi
      fi
    fi
  done <"$KEYBINDINGS_CONFIG"

  printf '%s\n' "${bindings[@]}"
}

# Display GUI
show_keybindings_gui() {
  local bindings_data
  bindings_data=$(parse_keybindings)

  echo "$bindings_data" | yad \
    --list \
    --title="keybindings" \
    --width=800 \
    --height=900 \
    --no-selection \
    --no-buttons \
    --search-column=2 \
    --expand-column=0 \
    --column="Key Combination" \
    --no-click \
    --column="Description" \
    --center
}

# Main execution
main() {
  ensure_single_instance
  check_dependencies
  show_keybindings_gui
}

main "$@"
